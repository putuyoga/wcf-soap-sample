//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mySOAP.App.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceResponse", Namespace="http://schemas.datacontract.org/2004/07/mySOAP.Responses")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(mySOAP.App.ServiceReference1.Distributor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(mySOAP.App.ServiceReference1.Distributor[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(byte[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(mySOAP.App.ServiceReference1.StatusFlag))]
    public partial class ServiceResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ErrorMessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private mySOAP.App.ServiceReference1.StatusFlag StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ErrorMessages {
            get {
                return this.ErrorMessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessagesField, value) != true)) {
                    this.ErrorMessagesField = value;
                    this.RaisePropertyChanged("ErrorMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public mySOAP.App.ServiceReference1.StatusFlag Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Distributor", Namespace="http://schemas.datacontract.org/2004/07/mySOAP.Models")]
    [System.SerializableAttribute()]
    public partial class Distributor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusFlag", Namespace="http://schemas.datacontract.org/2004/07/mySOAP.Responses")]
    public enum StatusFlag : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDistributorService")]
    public interface IDistributorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/GetByStatusAndId", ReplyAction="http://tempuri.org/IDistributorService/GetByStatusAndIdResponse")]
        mySOAP.App.ServiceReference1.ServiceResponse GetByStatusAndId(System.Guid[] distributorId, byte[] distributorStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/GetByStatusAndId", ReplyAction="http://tempuri.org/IDistributorService/GetByStatusAndIdResponse")]
        System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> GetByStatusAndIdAsync(System.Guid[] distributorId, byte[] distributorStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/GetAll", ReplyAction="http://tempuri.org/IDistributorService/GetAllResponse")]
        mySOAP.App.ServiceReference1.ServiceResponse GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/GetAll", ReplyAction="http://tempuri.org/IDistributorService/GetAllResponse")]
        System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/GetById", ReplyAction="http://tempuri.org/IDistributorService/GetByIdResponse")]
        mySOAP.App.ServiceReference1.ServiceResponse GetById(System.Guid[] distributorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/GetById", ReplyAction="http://tempuri.org/IDistributorService/GetByIdResponse")]
        System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> GetByIdAsync(System.Guid[] distributorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/GetByStatus", ReplyAction="http://tempuri.org/IDistributorService/GetByStatusResponse")]
        mySOAP.App.ServiceReference1.ServiceResponse GetByStatus(byte[] distributorStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/GetByStatus", ReplyAction="http://tempuri.org/IDistributorService/GetByStatusResponse")]
        System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> GetByStatusAsync(byte[] distributorStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/Add", ReplyAction="http://tempuri.org/IDistributorService/AddResponse")]
        mySOAP.App.ServiceReference1.ServiceResponse Add(mySOAP.App.ServiceReference1.Distributor item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/Add", ReplyAction="http://tempuri.org/IDistributorService/AddResponse")]
        System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> AddAsync(mySOAP.App.ServiceReference1.Distributor item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/Update", ReplyAction="http://tempuri.org/IDistributorService/UpdateResponse")]
        mySOAP.App.ServiceReference1.ServiceResponse Update(mySOAP.App.ServiceReference1.Distributor[] items);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDistributorService/Update", ReplyAction="http://tempuri.org/IDistributorService/UpdateResponse")]
        System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> UpdateAsync(mySOAP.App.ServiceReference1.Distributor[] items);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDistributorServiceChannel : mySOAP.App.ServiceReference1.IDistributorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DistributorServiceClient : System.ServiceModel.ClientBase<mySOAP.App.ServiceReference1.IDistributorService>, mySOAP.App.ServiceReference1.IDistributorService {
        
        public DistributorServiceClient() {
        }
        
        public DistributorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DistributorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DistributorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DistributorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public mySOAP.App.ServiceReference1.ServiceResponse GetByStatusAndId(System.Guid[] distributorId, byte[] distributorStatus) {
            return base.Channel.GetByStatusAndId(distributorId, distributorStatus);
        }
        
        public System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> GetByStatusAndIdAsync(System.Guid[] distributorId, byte[] distributorStatus) {
            return base.Channel.GetByStatusAndIdAsync(distributorId, distributorStatus);
        }
        
        public mySOAP.App.ServiceReference1.ServiceResponse GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public mySOAP.App.ServiceReference1.ServiceResponse GetById(System.Guid[] distributorId) {
            return base.Channel.GetById(distributorId);
        }
        
        public System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> GetByIdAsync(System.Guid[] distributorId) {
            return base.Channel.GetByIdAsync(distributorId);
        }
        
        public mySOAP.App.ServiceReference1.ServiceResponse GetByStatus(byte[] distributorStatus) {
            return base.Channel.GetByStatus(distributorStatus);
        }
        
        public System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> GetByStatusAsync(byte[] distributorStatus) {
            return base.Channel.GetByStatusAsync(distributorStatus);
        }
        
        public mySOAP.App.ServiceReference1.ServiceResponse Add(mySOAP.App.ServiceReference1.Distributor item) {
            return base.Channel.Add(item);
        }
        
        public System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> AddAsync(mySOAP.App.ServiceReference1.Distributor item) {
            return base.Channel.AddAsync(item);
        }
        
        public mySOAP.App.ServiceReference1.ServiceResponse Update(mySOAP.App.ServiceReference1.Distributor[] items) {
            return base.Channel.Update(items);
        }
        
        public System.Threading.Tasks.Task<mySOAP.App.ServiceReference1.ServiceResponse> UpdateAsync(mySOAP.App.ServiceReference1.Distributor[] items) {
            return base.Channel.UpdateAsync(items);
        }
    }
}
